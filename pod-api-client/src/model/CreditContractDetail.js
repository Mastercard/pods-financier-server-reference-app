/**
 * Pay On Demand for Digital Inclusion
 * Please visit https://developer.mastercard.com for additional details. ## Usage Notes - In the endpoints, you will see parameter examples in {{parameter}} format. You need to replace that with the actual value. This is usually applicable for identifier (ID). For example, on GET /contracts, you need to replace \"financier_id\" parameter with actual financier ID value. You can get this value either from querying using GET /financiers or creating a new financier using POST /financiers. The same applies for properties inside request body. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: PayonDemand_DigitalInclusion@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.PodApiClient) {
      root.PodApiClient = {};
    }
    root.PodApiClient.CreditContractDetail = factory(root.PodApiClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The CreditContractDetail model module.
   * @module model/CreditContractDetail
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>CreditContractDetail</code>.
   * details for credit contract.  Present only if contract type is CREDIT.
   * @alias module:model/CreditContractDetail
   * @class
   * @param availableCredit {Number} Available credit to be used.
   * @param totalCredit {Number} Total credit needed to complete contract.
   * @param usageInterval {Number} Interval in which credit being deducted from available credit
   * @param usageIntervalUnit {String} Time unit for length of interval. It can be DAY, WEEK or MONTH.
   * @param usageAmount {Number} Credit paymentAmount being deducted from available credit per usageInterval
   */
  var exports = function(availableCredit, totalCredit, usageInterval, usageIntervalUnit, usageAmount) {
    var _this = this;

    _this['availableCredit'] = availableCredit;
    _this['totalCredit'] = totalCredit;
    _this['usageInterval'] = usageInterval;
    _this['usageIntervalUnit'] = usageIntervalUnit;
    _this['usageAmount'] = usageAmount;
  };

  /**
   * Constructs a <code>CreditContractDetail</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CreditContractDetail} obj Optional instance to populate.
   * @return {module:model/CreditContractDetail} The populated <code>CreditContractDetail</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('availableCredit')) {
        obj['availableCredit'] = ApiClient.convertToType(data['availableCredit'], 'Number');
      }
      if (data.hasOwnProperty('totalCredit')) {
        obj['totalCredit'] = ApiClient.convertToType(data['totalCredit'], 'Number');
      }
      if (data.hasOwnProperty('usageInterval')) {
        obj['usageInterval'] = ApiClient.convertToType(data['usageInterval'], 'Number');
      }
      if (data.hasOwnProperty('usageIntervalUnit')) {
        obj['usageIntervalUnit'] = ApiClient.convertToType(data['usageIntervalUnit'], 'String');
      }
      if (data.hasOwnProperty('usageAmount')) {
        obj['usageAmount'] = ApiClient.convertToType(data['usageAmount'], 'Number');
      }
      if (data.hasOwnProperty('usedCredit')) {
        obj['usedCredit'] = ApiClient.convertToType(data['usedCredit'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Available credit to be used.
   * @member {Number} availableCredit
   */
  exports.prototype['availableCredit'] = undefined;
  /**
   * Total credit needed to complete contract.
   * @member {Number} totalCredit
   */
  exports.prototype['totalCredit'] = undefined;
  /**
   * Interval in which credit being deducted from available credit
   * @member {Number} usageInterval
   */
  exports.prototype['usageInterval'] = undefined;
  /**
   * Time unit for length of interval. It can be DAY, WEEK or MONTH.
   * @member {String} usageIntervalUnit
   */
  exports.prototype['usageIntervalUnit'] = undefined;
  /**
   * Credit paymentAmount being deducted from available credit per usageInterval
   * @member {Number} usageAmount
   */
  exports.prototype['usageAmount'] = undefined;
  /**
   * Credit used to pay contract
   * @member {Number} usedCredit
   */
  exports.prototype['usedCredit'] = undefined;



  return exports;
}));


