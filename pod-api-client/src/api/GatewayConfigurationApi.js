/**
 * Pay On Demand for Digital Inclusion
 * Please visit https://developer.mastercard.com for additional details. ## Usage Notes - In the endpoints, you will see parameter examples in {{parameter}} format. You need to replace that with the actual value. This is usually applicable for identifier (ID). For example, on GET /contracts, you need to replace \"financier_id\" parameter with actual financier ID value. You can get this value either from querying using GET /financiers or creating a new financier using POST /financiers. The same applies for properties inside request body. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: PayonDemand_DigitalInclusion@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/GatewayConfiguration', 'model/GatewayConfigurationRequest', 'model/GatewayConfigurations'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/GatewayConfiguration'), require('../model/GatewayConfigurationRequest'), require('../model/GatewayConfigurations'));
  } else {
    // Browser globals (root is window)
    if (!root.PodApiClient) {
      root.PodApiClient = {};
    }
    root.PodApiClient.GatewayConfigurationApi = factory(root.PodApiClient.ApiClient, root.PodApiClient.ErrorResponse, root.PodApiClient.GatewayConfiguration, root.PodApiClient.GatewayConfigurationRequest, root.PodApiClient.GatewayConfigurations);
  }
}(this, function(ApiClient, ErrorResponse, GatewayConfiguration, GatewayConfigurationRequest, GatewayConfigurations) {
  'use strict';

  /**
   * GatewayConfiguration service.
   * @module api/GatewayConfigurationApi
   * @version 1.0.0
   */

  /**
   * Constructs a new GatewayConfigurationApi. 
   * @alias module:api/GatewayConfigurationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addGatewayConfiguration operation.
     * @callback module:api/GatewayConfigurationApi~addGatewayConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add gateway configuration
     * ##### Usage - Replace {{financier_id}} with an actual Financier ID before trying this endpoint.   - Replace {{gateway_id}} with an actual Gateway ID before trying this endpoint.  
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayConfigurationRequest} opts.gatewayConfigurationRequest 
     * @param {module:api/GatewayConfigurationApi~addGatewayConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayConfiguration}
     */
    this.addGatewayConfiguration = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['gatewayConfigurationRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GatewayConfiguration;
      return this.apiClient.callApi(
        '/gateway-configurations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGatewayConfiguration operation.
     * @callback module:api/GatewayConfigurationApi~deleteGatewayConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete gateway configuration
     * ##### Usage - Replace {{gateway_configuration_id}} with an actual Gateway Configuration ID before trying this endpoint.  
     * @param {String} gatewayConfigurationId 
     * @param {module:api/GatewayConfigurationApi~deleteGatewayConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteGatewayConfiguration = function(gatewayConfigurationId, callback) {
      var postBody = null;
      // verify the required parameter 'gatewayConfigurationId' is set
      if (gatewayConfigurationId === undefined || gatewayConfigurationId === null) {
        throw new Error("Missing the required parameter 'gatewayConfigurationId' when calling deleteGatewayConfiguration");
      }

      var pathParams = {
        'gateway_configuration_id': gatewayConfigurationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/gateway-configurations/{gateway_configuration_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGatewayConfiguration operation.
     * @callback module:api/GatewayConfigurationApi~getGatewayConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gateway configuration
     * ##### Usage - Replace {{gateway_configuration_id}} with an actual Gateway Configuration ID before trying this endpoint.  
     * @param {String} gatewayConfigurationId 
     * @param {module:api/GatewayConfigurationApi~getGatewayConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayConfiguration}
     */
    this.getGatewayConfiguration = function(gatewayConfigurationId, callback) {
      var postBody = null;
      // verify the required parameter 'gatewayConfigurationId' is set
      if (gatewayConfigurationId === undefined || gatewayConfigurationId === null) {
        throw new Error("Missing the required parameter 'gatewayConfigurationId' when calling getGatewayConfiguration");
      }

      var pathParams = {
        'gateway_configuration_id': gatewayConfigurationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GatewayConfiguration;
      return this.apiClient.callApi(
        '/gateway-configurations/{gateway_configuration_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGatewayConfigurations operation.
     * @callback module:api/GatewayConfigurationApi~getGatewayConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayConfigurations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of gateway configurations
     * ##### Usage - Replace {{financier_id}} with an actual Financier ID before trying this endpoint.  
     * @param {String} financierId Financier ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit of number of returned items. (default to 20)
     * @param {Number} opts.offset Offset of returned items from the beginning. (default to 0)
     * @param {module:api/GatewayConfigurationApi~getGatewayConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayConfigurations}
     */
    this.getGatewayConfigurations = function(financierId, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'financierId' is set
      if (financierId === undefined || financierId === null) {
        throw new Error("Missing the required parameter 'financierId' when calling getGatewayConfigurations");
      }

      var pathParams = {
      };
      var queryParams = {
        'financier_id': financierId,
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GatewayConfigurations;
      return this.apiClient.callApi(
        '/gateway-configurations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGatewayConfiguration operation.
     * @callback module:api/GatewayConfigurationApi~updateGatewayConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update gateway configuration
     * ##### Usage - Replace {{gateway_configuration_id}} with an actual Gateway Configuration ID before trying this endpoint.  - Replace {{financier_id}} with an actual Financier ID before trying this endpoint.  - Replace {{gateway_id}} with an actual Gateway ID before trying this endpoint.  
     * @param {String} gatewayConfigurationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayConfigurationRequest} opts.gatewayConfigurationRequest 
     * @param {module:api/GatewayConfigurationApi~updateGatewayConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayConfiguration}
     */
    this.updateGatewayConfiguration = function(gatewayConfigurationId, opts, callback) {
      opts = opts || {};
      var postBody = opts['gatewayConfigurationRequest'];
      // verify the required parameter 'gatewayConfigurationId' is set
      if (gatewayConfigurationId === undefined || gatewayConfigurationId === null) {
        throw new Error("Missing the required parameter 'gatewayConfigurationId' when calling updateGatewayConfiguration");
      }

      var pathParams = {
        'gateway_configuration_id': gatewayConfigurationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GatewayConfiguration;
      return this.apiClient.callApi(
        '/gateway-configurations/{gateway_configuration_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }
  };

  return exports;
}));
