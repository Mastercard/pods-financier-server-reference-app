/**
 * Pay On Demand for Digital Inclusion
 * ## Usage Notes - In the endpoints, you will see parameter examples in {{parameter}} format. You need to replace that with the correct value. This is usually used for identifier (ID). For example, on GET /contracts, you need to replace \"financier_id\" parameter with actual financier ID. You can get this either from querying using GET /financiers or creating a new financier using POST /financiers. This also applies for properties inside request body.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: PayonDemand_DigitalInclusion@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.0
 *
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd() + '/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd() + '/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PodApiClient);
  }
})(this, function (expect, PodApiClient) {
  'use strict';

  var instance;

  beforeEach(function () {
    instance = new PodApiClient.ContractUpdateRequest();
  });

  var getProperty = function (object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function') return object[getter]();
    else return object[property];
  };

  var setProperty = function (object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function') object[setter](value);
    else object[property] = value;
  };

  describe('ContractUpdateRequest', function () {
    it('should create an instance of ContractUpdateRequest', function () {
      // uncomment below and update the code to test ContractUpdateRequest
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.be.a(PodApiClient.ContractUpdateRequest);
    });

    it('should have the property amount (base name: "amount")', function () {
      // uncomment below and update the code to test the property amount
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.have.property('amount');
    });

    it('should have the property currency (base name: "currency")', function () {
      // uncomment below and update the code to test the property currency
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.have.property('currency');
    });

    it('should have the property defaultPaymentMethodId (base name: "defaultPaymentMethodId")', function () {
      // uncomment below and update the code to test the property defaultPaymentMethodId
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.have.property('defaultPaymentMethodId');
    });

    it('should have the property device (base name: "device")', function () {
      // uncomment below and update the code to test the property device
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.have.property('device');
    });

    it('should have the property downpaymentAmount (base name: "downpaymentAmount")', function () {
      // uncomment below and update the code to test the property downpaymentAmount
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.have.property('downpaymentAmount');
    });

    it('should have the property downpaymentTransactionId (base name: "downpaymentTransactionId")', function () {
      // uncomment below and update the code to test the property downpaymentTransactionId
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.have.property('downpaymentTransactionId');
    });

    it('should have the property duration (base name: "duration")', function () {
      // uncomment below and update the code to test the property duration
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.have.property('duration');
    });

    it('should have the property durationUnit (base name: "durationUnit")', function () {
      // uncomment below and update the code to test the property durationUnit
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.have.property('durationUnit');
    });

    it('should have the property gracePeriod (base name: "gracePeriod")', function () {
      // uncomment below and update the code to test the property gracePeriod
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.have.property('gracePeriod');
    });

    it('should have the property gracePeriodUnit (base name: "gracePeriodUnit")', function () {
      // uncomment below and update the code to test the property gracePeriodUnit
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.have.property('gracePeriodUnit');
    });

    it('should have the property instalmentContractDetails (base name: "instalmentContractDetails")', function () {
      // uncomment below and update the code to test the property instalmentContractDetails
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.have.property('instalmentContractDetails');
    });

    it('should have the property startDate (base name: "startDate")', function () {
      // uncomment below and update the code to test the property startDate
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.have.property('startDate');
    });

    it('should have the property status (base name: "status")', function () {
      // uncomment below and update the code to test the property status
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.have.property('status');
    });

    it('should have the property type (base name: "type")', function () {
      // uncomment below and update the code to test the property type
      var instance = new PodApiClient.ContractUpdateRequest();
      expect(instance).to.have.property('type');
    });

    it('should copy to provided object even for empty data', function () {
      const instance = PodApiClient.ContractUpdateRequest.constructFromObject(
        {}
      );
      expect(instance).to.have.property('amount');
      expect(instance).to.have.property('currency');
      expect(instance).to.have.property('downpaymentAmount');
      expect(instance).to.have.property('duration');
      expect(instance).to.have.property('durationUnit');
      expect(instance).to.have.property('startDate');
      expect(instance).to.have.property('status');
      expect(instance).to.have.property('type');
    });

    it('should copy to provided object', function () {
      const instance = {};
      PodApiClient.ContractUpdateRequest.constructFromObject(
        {
          amount: 599,
          currency: 'SGD',
          downpaymentAmount: 20,
          duration: 24,
          durationUnit: 'MONTH',
          startDate: '11-22-2009',
          status: 'ACTIVE',
          type: 'INSTALMENT',
          defaultPaymentMethodId: 'method',
          device: 'device',
          downpaymentTransactionId: 'downpaymentTransactionId',
          instalmentContractDetails: 'instalmentContractDetails',
          gracePeriod: 15,
          gracePeriodUnit: 'DAY',
        },
        instance
      );
      expect(instance).to.have.property('amount', 599);
      expect(instance).to.have.property('currency', 'SGD');
      expect(instance).to.have.property('downpaymentAmount', 20);
      expect(instance).to.have.property('duration', 24);
      expect(instance).to.have.property('durationUnit', 'MONTH');
      expect(instance.startDate.getTime()).to.equal(
        new Date('11-22-2009').getTime()
      );
      expect(instance).to.have.property('status', 'ACTIVE');
      expect(instance).to.have.property('type', 'INSTALMENT');
      expect(instance).to.have.property('gracePeriod', 15);
      expect(instance).to.have.property('gracePeriodUnit', 'DAY');
    });
  });
});
