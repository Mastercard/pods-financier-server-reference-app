/**
 * Pay On Demand for Digital Inclusion
 * ## Usage Notes - In the endpoints, you will see parameter examples in {{parameter}} format. You need to replace that with the correct value. This is usually used for identifier (ID). For example, on GET /contracts, you need to replace \"financier_id\" parameter with actual financier ID. You can get this either from querying using GET /financiers or creating a new financier using POST /financiers. This also applies for properties inside request body.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: PayonDemand_DigitalInclusion@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.0
 *
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd() + '/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd() + '/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PodApiClient);
  }
})(this, function (expect, PodApiClient) {
  'use strict';

  var instance;

  beforeEach(function () {
    instance = new PodApiClient.CreditContractDetail();
  });

  var getProperty = function (object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function') return object[getter]();
    else return object[property];
  };

  var setProperty = function (object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function') object[setter](value);
    else object[property] = value;
  };

  describe('CreditContractDetail', function () {
    it('should create an instance of CreditContractDetail', function () {
      // uncomment below and update the code to test CreditContractDetail
      var instance = new PodApiClient.CreditContractDetail();
      expect(instance).to.be.a(PodApiClient.CreditContractDetail);
    });

    it('should have the property availableCredit (base name: "availableCredit")', function () {
      // uncomment below and update the code to test the property availableCredit
      var instance = new PodApiClient.CreditContractDetail();
      expect(instance).to.have.property('availableCredit');
    });

    it('should have the property totalCredit (base name: "totalCredit")', function () {
      // uncomment below and update the code to test the property totalCredit
      var instance = new PodApiClient.CreditContractDetail();
      expect(instance).to.have.property('totalCredit');
    });

    it('should have the property usageInterval (base name: "usageInterval")', function () {
      // uncomment below and update the code to test the property usageInterval
      var instance = new PodApiClient.CreditContractDetail();
      expect(instance).to.have.property('usageInterval');
    });

    it('should have the property usageIntervalUnit (base name: "usageIntervalUnit")', function () {
      // uncomment below and update the code to test the property usageIntervalUnit
      var instance = new PodApiClient.CreditContractDetail();
      expect(instance).to.have.property('usageIntervalUnit');
    });

    it('should have the property usageAmount (base name: "usageAmount")', function () {
      // uncomment below and update the code to test the property usageAmount
      var instance = new PodApiClient.CreditContractDetail();
      expect(instance).to.have.property('usageAmount');
    });

    it('should have the property usedCredit (base name: "usedCredit")', function () {
      // uncomment below and update the code to test the property usedCredit
      var instance = new PodApiClient.CreditContractDetail();
      expect(instance).to.have.property('usedCredit');
    });

    it('should copy from constructor argument', function () {
      const instance = new PodApiClient.CreditContractDetail(
        '522',
        '321',
        '5',
        'DAY',
        '21'
      );
      expect(instance).to.have.property('availableCredit', '522');
      expect(instance).to.have.property('totalCredit', '321');
      expect(instance).to.have.property('usageInterval', '5');
      expect(instance).to.have.property('usageIntervalUnit', 'DAY');
      expect(instance).to.have.property('usageAmount', '21');
    });

    it('should copy to provided object even for empty data', function () {
      const instance = PodApiClient.CreditContractDetail.constructFromObject(
        {}
      );
      expect(instance).to.have.property('availableCredit');
      expect(instance).to.have.property('totalCredit');
      expect(instance).to.have.property('usageInterval');
      expect(instance).to.have.property('usageIntervalUnit');
      expect(instance).to.have.property('usageAmount');
    });

    it('should copy to provided object', function () {
      const instance = {};
      PodApiClient.CreditContractDetail.constructFromObject(
        {
          availableCredit: '522',
          totalCredit: '321',
          usageInterval: '5',
          usageIntervalUnit: 'DAY',
          usageAmount: '21',
          usedCredit: '121'
        },
        instance
      );
      expect(instance).to.have.property('availableCredit', 522);
      expect(instance).to.have.property('totalCredit', 321);
      expect(instance).to.have.property('usageInterval', 5);
      expect(instance).to.have.property('usageIntervalUnit', 'DAY');
      expect(instance).to.have.property('usageAmount', 21);
    });
  });
});
